// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("viewer") // admin, editor, viewer
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  blogPosts        BlogPost[]
  fileUploads      FileUpload[]
  assignedInquiries ContactInquiry[] @relation("AssignedTo")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamMember {
  id           String   @id @default(cuid())
  name         String
  position     String
  bio          String?
  imageUrl     String?
  linkedinUrl  String?
  email        String?
  phone        String?
  isFounder    Boolean  @default(false)
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?
  content       String?
  featuredImage String?
  gallery       String? // JSON array of image URLs
  technologies  String? // JSON array of technology names
  clientName    String?
  projectUrl    String?
  githubUrl     String?
  status        String   @default("draft") // draft, published, archived
  featured      Boolean  @default(false)
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Service {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?
  content       String?
  icon          String?
  featuredImage String?
  priceRange    String?
  duration      String?
  isActive      Boolean  @default(true)
  displayOrder  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlogPost {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  excerpt        String?
  content        String
  featuredImage  String?
  authorId       String
  status         String    @default("draft") // draft, published, archived
  featured       Boolean   @default(false)
  publishedAt    DateTime?
  seoTitle       String?
  seoDescription String?
  tags           String? // JSON array of tag names
  readingTime    Int? // Minutes
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  author User @relation(fields: [authorId], references: [id])
}

model ContactInquiry {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  company    String?
  subject    String?
  message    String
  status     String   @default("new") // new, in_progress, resolved, closed
  assignedTo String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  assignedUser User? @relation("AssignedTo", fields: [assignedTo], references: [id])
}

model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String?
  type        String   @default("string") // string, number, boolean, json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FileUpload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int?
  mimeType     String?
  uploadedBy   String
  createdAt    DateTime @default(now())

  uploader User @relation(fields: [uploadedBy], references: [id])
}